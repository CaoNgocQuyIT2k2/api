// Khi trang ƒë∆∞·ª£c t·∫£i l·∫°i, hi·ªÉn th·ªã spinner
document.addEventListener('DOMContentLoaded', () => {
  showSpinner();
  renderProductionList(); // G·ªçi h√†m ƒë·ªÉ t·∫£i danh s√°ch s·∫£n ph·∫©m l·∫°i sau khi trang ƒë∆∞·ª£c t·∫£i l·∫°i
});

// Button shop
function scrollToProducts() {
  // L·∫•y ph·∫ßn t·ª≠ "products" b·∫±ng c√°ch s·ª≠ d·ª•ng class
  var productsElement = document.querySelector(".products");

  // S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c scrollIntoView ƒë·ªÉ cu·ªôn trang ƒë·∫øn ph·∫ßn t·ª≠ "products"
  if (productsElement) {
    productsElement.scrollIntoView({ behavior: "smooth" });
  }
}
window.scrollToProducts = scrollToProducts
window.filterProducts = filterProducts
var dssp = []; // ƒê·ªãnh nghƒ©a bi·∫øn dssp ·ªü ngo√†i ph·∫°m vi c·ªßa h√†m

function renderProductionList(productArr) {
  var productContainer = document.getElementById("product-container");
  productContainer.innerHTML = ""; // X√≥a n·ªôi dung c≈© trong container tr∆∞·ªõc khi th√™m d·ªØ li·ªáu m·ªõi

  productArr.forEach((product) => {
    var productDiv = document.createElement("div");
    productDiv.classList.add("item");
    productDiv.innerHTML = `
      <div class="item">
        <img class="image" src="${product.img}" alt="${product.name}" />
        <div class="desc">
          <div class="detail">
            <h3>${product.name}</h3>
            <p>${product.type}</p>
            <div>
              <i class="fa-solid fa-star"></i>
              <i class="fa-solid fa-star"></i>
              <i class="fa-solid fa-star"></i>
              <i class="fa-solid fa-star"></i>
              <i class="fa-solid fa-star"></i>
            </div>
          </div>
          <div class="price">
            <span>${product.price}$</span>
            <button class="add-to-cart">Add to Cart</button>
          </div>
        </div>
      </div>
    `;

    productContainer.appendChild(productDiv);

    // Th√™m s·ª± ki·ªán click v√†o n√∫t "Add to Cart"
    const addToCartButton = productDiv.querySelector(".add-to-cart");
    addToCartButton.addEventListener("click", () => {
      addToCart(productDiv);
    });
  });
}



//------------------------------L·ªçc s·∫£n ph·∫©m--------------------
// H√†m l·ªçc danh s√°ch s·∫£n ph·∫©m theo lo·∫°i s·∫£n ph·∫©m
function filterProducts() {
  var filterSelect = document.getElementById("filterSelect");

  // Ki·ªÉm tra xem filterSelect c√≥ t·ªìn t·∫°i kh√¥ng
  if (filterSelect) {
    var selectedOption = filterSelect.value;

    // L·ªçc danh s√°ch s·∫£n ph·∫©m d·ª±a tr√™n lo·∫°i s·∫£n ph·∫©m ƒë√£ ch·ªçn
    var filteredProducts;

    if (selectedOption === "") {
      // N·∫øu ch·ªçn "T·∫•t c·∫£", tr·∫£ v·ªÅ t·∫•t c·∫£ s·∫£n ph·∫©m
      filteredProducts = dssp;
    } else {
      // Ng∆∞·ª£c l·∫°i, l·ªçc theo lo·∫°i s·∫£n ph·∫©m ƒë√£ ch·ªçn
      filteredProducts = dssp.filter(function (product) {
        return product.type.toLowerCase() === selectedOption;
      });
    }

    // G·ªçi h√†m ƒë·ªÉ hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c l·ªçc
    renderProductionList(filteredProducts);
  }
}


// G·ªçi api l·∫•y danh s√°ch s·∫£n ph·∫©m ƒëang c√≥ t·ª´ server
axios({
  url: "https://6520dbe6906e276284c4beec.mockapi.io/Products",
  method: "GET",
})
  .then((res) => {
    // Api tr·∫£ v·ªÅ th√†nh c√¥ng
    dssp = res.data; // G√°n danh s√°ch s·∫£n ph·∫©m cho bi·∫øn dssp

    // G·ªçi h√†m filterProducts ƒë·ªÉ hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m ban ƒë·∫ßu
    filterProducts();
  })
  .catch((err) => {
    console.log(err);
  }); 
//------------------------Gi·ªè h√†ng--------------------------

// Khai b√°o m·∫£ng ƒë·ªÉ l∆∞u tr·ªØ c√°c s·∫£n ph·∫©m trong gi·ªè h√†ng
const cart = [];


// H√†m ƒë·ªÉ l·∫•y th√¥ng tin s·∫£n ph·∫©m t·ª´ ph·∫ßn t·ª≠ s·∫£n ph·∫©m
function getDataItem(productElement) {
  // L·∫•y c√°c ph·∫ßn t·ª≠ con t∆∞∆°ng ·ª©ng trong ph·∫ßn t·ª≠ s·∫£n ph·∫©m
  var nameElement = productElement.querySelector("h3");
  var priceElement = productElement.querySelector(".price span");
  var imgElement = productElement.querySelector(".image");
  var typeElement = productElement.querySelector("p");

  // Tr√≠ch xu·∫•t th√¥ng tin t·ª´ c√°c ph·∫ßn t·ª≠ HTML
  var nameItem = nameElement.textContent;
  var priceItem = priceElement.textContent;
  var imgItem = imgElement.src;
  var typeItem = typeElement.textContent;

  // T·∫°o ƒë·ªëi t∆∞·ª£ng s·∫£n ph·∫©m t·ª´ th√¥ng tin tr√≠ch xu·∫•t
  return {
    name: nameItem,
    price: priceItem,
    img: imgItem,
    type: typeItem,
  };
}

 let productList = [];

let productList_localStorage = "productList_localStorage";

// Render l·∫°i data t·ª´ local storage khi user reload 
var dataJson = localStorage.getItem(productList_localStorage);

  //
  import { tableIdCounter } from "./cart_index.js";
  // Import v√† s·ª≠ d·ª•ng h√†m renderItemList
  import { renderItemList } from "./cart_index.js";

  // S·ª≠ d·ª•ng h√†m renderItemList ·ªü ƒë√¢y
  if (dataJson != null) {
    // Ki·ªÉm tra d·ªØ li·ªáu d∆∞·ªõi local storage c√≥ t·ªìn t·∫°i hay kh√¥ng tr∆∞·ªõc khi render
    productList = JSON.parse(dataJson); // G√°n d·ªØ li·ªáu t·ª´ localStorage v√†o productList
    // Export bi·∫øn productList
    // renderItemList(productList);
  }

// Export bi·∫øn productList
export default productList;
window.productList = productList;


function calculateTotalQuality() {
  const totalQuality = productList.reduce((total, item) => total + item.quality, 0);
  return totalQuality;
}

// G·ªçi h√†m ƒë·ªÉ t√≠nh t·ªïng quality
const totalQuality = calculateTotalQuality();

// Hi·ªÉn th·ªã gi√° tr·ªã t·ªïng quality trong th·∫ª cart-count
const cartCountElement = document.getElementById("cart-count");
cartCountElement.textContent = totalQuality;



function calculateTotalQuantityInCart() {
  const totalQuantity = cart.reduce((total, item) => total + item.quality, 0);
  console.log("üöÄ ~ totalQuantity:", totalQuantity)
  return totalQuantity;
}

import { updateCartCount } from "./cart_index.js";


// H√†m ƒë·ªÉ th√™m s·∫£n ph·∫©m v√†o m·∫£ng productList
function addToProductList(product) {
  // Ki·ªÉm tra xem s·∫£n ph·∫©m ƒë√£ c√≥ trong danh s√°ch s·∫£n ph·∫©m ch∆∞a
  const existingProductIndex = productList.findIndex(
    (item) => item.name === product.name
  );

  if (existingProductIndex !== -1) {
    // N·∫øu s·∫£n ph·∫©m ƒë√£ t·ªìn t·∫°i trong danh s√°ch, tƒÉng quality l√™n 1 ƒë∆°n v·ªã
    productList[existingProductIndex].quality += 1;
  } else {
    // N·∫øu s·∫£n ph·∫©m ch∆∞a t·ªìn t·∫°i trong danh s√°ch, th√™m v√†o v·ªõi quality l√† 1
    product.quality = 1;
    productList.push(product);
  }

  // Log th√¥ng b√°o v√†o console
  console.log("S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c th√™m v√†o danh s√°ch s·∫£n ph·∫©m:", product.name);

  // Log danh s√°ch s·∫£n ph·∫©m v√†o console
  console.log("Danh s√°ch s·∫£n ph·∫©m:", productList);

  // Convert array to json ƒë·ªÉ l∆∞u xu·ªëng local storage
  var dataJson = JSON.stringify(productList); // S·ª≠a th√†nh productList
  // L∆∞u json v√†o local storage
  localStorage.setItem(productList_localStorage, dataJson);
  // L∆∞u s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng v√†o local storage
  const totalQuantityInCart = calculateTotalQuantityInCart();
  localStorage.setItem("totalQuantityInCart", totalQuantityInCart);

}



// H√†m ƒë·ªÉ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
function addToCart(productElement) {
  // L·∫•y th√¥ng tin s·∫£n ph·∫©m t·ª´ h√†m getDataItem
  const selectedProduct = getDataItem(productElement);
  updateCartCount();
  // Ki·ªÉm tra xem s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè h√†ng ch∆∞a
  const existingCartItem = cart.find(
    (item) => item.name === selectedProduct.name
  );

  if (existingCartItem) {
    // N·∫øu s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè h√†ng, tƒÉng quality l√™n 1 ƒë∆°n v·ªã
    existingCartItem.quality += 1;
  } else {
    // N·∫øu s·∫£n ph·∫©m ch∆∞a c√≥ trong gi·ªè h√†ng, th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng v·ªõi quality l√† 1
    selectedProduct.quality = 1;
    cart.push(selectedProduct);
  }



  // G·ªçi h√†m ƒë·ªÉ th√™m s·∫£n ph·∫©m v√†o danh s√°ch s·∫£n ph·∫©m
  addToProductList(selectedProduct);
}

